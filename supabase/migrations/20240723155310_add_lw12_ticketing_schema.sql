create table
  public.lw12_tickets (
    id uuid not null default auth.uid (),
    email text null,
    name text null,
    username text null,
    created_at timestamp with time zone not null default timezone ('utc'::text, now()),
    referred_by text null,
    shared_on_twitter timestamp with time zone null,
    shared_on_linkedin timestamp with time zone null,
    game_won_at timestamp with time zone null,
    ticket_number bigint generated by default as identity,
    metadata jsonb null,
    role text null,
    company text null,
    location text null,
    constraint lw12_tickets_pkey primary key (id),
    constraint lw12_tickets_email_key unique (email),
    constraint lw12_tickets_ticket_numberInt_key unique ("ticket_number"),
    constraint lw12_tickets_username_key unique (username),
    constraint public_lw12_tickets_id_fkey foreign key (id) references auth.users (id)
  );

alter table public.lw12_tickets enable row level security;
alter publication supabase_realtime add table public.lw12_tickets;

GRANT UPDATE (role) ON TABLE public.lw12_tickets TO authenticated;
GRANT UPDATE (company) ON TABLE public.lw12_tickets TO authenticated;
GRANT UPDATE (location) ON TABLE public.lw12_tickets TO authenticated;

create policy "Allow user to select own ticket"
on "public"."lw12_tickets"
as PERMISSIVE
for SELECT
to authenticated
using (id = auth.uid());

create policy "Allow authenticated user to update its own ticket"
on "public"."lw12_tickets"
as permissive
for update
to authenticated
using ((id = auth.uid()))
with check ((id = auth.uid()));

create policy "Enable insert for authenticated users only"
on "public"."lw12_tickets"
as permissive
for insert
to authenticated
with check ((id = auth.uid()));

-- public view without sensible data
create or replace view "public"."lw12_tickets_view" as
  WITH lw12_referrals AS (
    select
      referred_by,
      count(*) as referrals
    from
      lw12_tickets
    where
      referred_by is not null
    group by
      referred_by
    )
  SELECT lw12_tickets.id,
    lw12_tickets.name,
    lw12_tickets.username,
    lw12_tickets.ticket_number,
    lw12_tickets.created_at,
    lw12_tickets.shared_on_twitter,
    lw12_tickets.shared_on_linkedin,
    lw12_tickets.metadata,
    lw12_tickets.role,
    lw12_tickets.company,
    lw12_tickets.location,
      case
        when lw12_referrals.referrals is null then 0
        else lw12_referrals.referrals
      end as referrals,
      CASE
        WHEN ((lw12_tickets.shared_on_twitter IS NOT NULL) AND (lw12_tickets.shared_on_linkedin IS NOT NULL)) THEN true
        ELSE false
      END AS platinum,
      CASE
        WHEN (lw12_tickets.game_won_at IS NOT NULL) THEN true
        ELSE false
      END AS secret
    from
      lw12_tickets
      left outer join lw12_referrals on lw12_tickets.username = lw12_referrals.referred_by;

-- Create meetups table
create table
  public.meetups (
    id bigint generated by default as identity,
    created_at timestamp with time zone null default now(),
    location text null,
    date timestamp with time zone null,
    link text null,
    display_info text null,
    edition text null,
    is_live boolean not null default false,
    is_published boolean not null default false,
    constraint meetups_pkey primary key (id)
  );

alter table public.meetups enable row level security;
alter publication supabase_realtime add table public.meetups;

create policy "Allow anybody to select all meetups"
on public.meetups
as permissive
for all
using (true);