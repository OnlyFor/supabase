create table
  public.lw12_tickets (
    id uuid not null default auth.uid (),
    email text null,
    name text null,
    username text null,
    created_at timestamp with time zone not null default timezone ('utc'::text, now()),
    referred_by text null,
    shared_on_twitter timestamp with time zone null,
    shared_on_linkedIn timestamp with time zone null,
    metadata jsonb null,
    game_won_at timestamp with time zone null,
    ticket_number bigint generated by default as identity,
    role text null,
    company text null,
    location text null,
    constraint lw12_tickets_pkey primary key (id),
    constraint lw12_tickets_email_key unique (email),
    constraint lw12_tickets_ticket_numberInt_key unique ("ticket_number"),
    constraint lw12_tickets_username_key unique (username),
    constraint public_lw12_tickets_id_fkey foreign key (id) references auth.users (id)
  ) tablespace pg_default;

alter table public.lw12_tickets enable row level security;

create policy "Allow authenticated to select own ticket"
on "public"."lw12_tickets"
as permissive
for all
to authenticated
using ((id = auth.uid()));

create policy "Allow user to update its own ticket"
on "public"."lw12_tickets"
as permissive
for update
to authenticated
using ((id = auth.uid()))
with check ((id = auth.uid()));

create policy "Enable insert for authenticated users only"
on "public"."lw12_tickets"
as permissive
for insert
to authenticated
with check ((id = auth.uid()));

-- public view without sensible data
create or replace view "public"."lw12_tickets_view" as  WITH lw11_referrals AS (
  SELECT lw12_tickets_1.referred_by,
    count(*) AS referrals
    FROM lw12_tickets lw12_tickets_1
  WHERE (lw12_tickets_1.referred_by IS NOT NULL)
  GROUP BY lw12_tickets_1.referred_by
    )
  SELECT lw12_tickets.id,
    lw12_tickets.name,
    lw12_tickets.username,
    lw12_tickets.ticket_number,
    lw12_tickets.created_at,
    lw12_tickets.shared_on_twitter,
    lw12_tickets.shared_on_linkedIn,
    lw12_tickets.metadata,
    lw12_tickets.role,
    lw12_tickets.company,
    lw12_tickets.location,
      CASE
        WHEN (lw11_referrals.referrals IS NULL) THEN (0)::bigint
        ELSE lw11_referrals.referrals
      END AS referrals,
      CASE
        WHEN ((lw12_tickets.shared_on_twitter IS NOT NULL) AND (lw12_tickets.shared_on_linkedIn IS NOT NULL)) THEN true
        ELSE false
      END AS platinum,
      CASE
        WHEN (lw12_tickets.game_won_at IS NOT NULL) THEN true
        ELSE false
      END AS secret
    FROM (lw12_tickets
      LEFT JOIN lw11_referrals ON ((lw12_tickets.username = lw11_referrals.referred_by)));

-- Create meetups table
create table
  public.lw_meetups (
    id bigint generated by default as identity,
    created_at timestamp with time zone null default now(),
    lw_edition text null,
    title text null,
    is_live boolean not null default false,
    link text null,
    display_info text null,
    start_at timestamp with time zone null,
    is_published boolean not null default false,
    constraint lwga_meetups_pkey primary key (id)
  ) tablespace pg_default;

alter table public.lw_meetups enable row level security;

create policy "Allow anybody to select all meetups"
on public.lw_meetups
as permissive
for all
using (true);